{"version":3,"sources":["src/server/accessors/SchedulerModify.ts"],"names":[],"mappings":";;;;;;;;;;;;AAOA,SAAS,iBAAiB,CAAC,KAAa,EAAE,KAAa;IACnD,OAAO,KAAK,CAAC,QAAQ,CAAC,IAAI,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAI,KAAM,IAAK,KAAM,EAAE,CAAC;AACzE,CAAC;AAED,MAAa,eAAe;IACxB,YAA6B,MAAuB,EAAmB,KAAa;QAAvD,WAAM,GAAN,MAAM,CAAiB;QAAmB,UAAK,GAAL,KAAK,CAAQ;IAAG,CAAC;IAE3E,YAAY,CAAC,GAAqB;;YAC3C,IAAI,CAAC,MAAM,CAAC,cAAc,iCAAM,GAAG,KAAE,EAAE,EAAE,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QAClG,CAAC;KAAA;IAEY,iBAAiB,CAAC,GAAuB;;YAClD,IAAI,CAAC,MAAM,CAAC,mBAAmB,iCAAM,GAAG,KAAE,EAAE,EAAE,iBAAiB,CAAC,GAAG,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,KAAI,IAAI,CAAC,KAAK,CAAC,CAAC;QACvG,CAAC;KAAA;IAEY,SAAS,CAAC,KAAa;;YAChC,IAAI,CAAC,MAAM,CAAC,WAAW,CAAC,iBAAiB,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QAC9E,CAAC;KAAA;IAEY,aAAa;;YACtB,IAAI,CAAC,MAAM,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC5C,CAAC;KAAA;IACY,oBAAoB,CAAC,IAAY;;YAC1C,IAAI,CAAC,MAAM,CAAC,sBAAsB,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;QACzD,CAAC;KAAA;CACJ;AArBD,0CAqBC","file":"SchedulerModify.js","sourcesContent":["import { ISchedulerModify } from '../../definition/accessors';\nimport {\n    IOnetimeSchedule,\n    IRecurringSchedule,\n} from '../../definition/scheduler';\nimport { SchedulerBridge } from '../bridges';\n\nfunction createProcessorId(jobId: string, appId: string): string {\n    return jobId.includes(`_${appId}`) ? jobId : `${ jobId }_${ appId }`;\n}\n\nexport class SchedulerModify implements ISchedulerModify {\n    constructor(private readonly bridge: SchedulerBridge, private readonly appId: string) {}\n\n    public async scheduleOnce(job: IOnetimeSchedule): Promise<void> {\n        this.bridge.doScheduleOnce({ ...job, id: createProcessorId(job.id, this.appId) }, this.appId);\n    }\n\n    public async scheduleRecurring(job: IRecurringSchedule): Promise<void> {\n        this.bridge.doScheduleRecurring({ ...job, id: createProcessorId(job.id, this.appId) }, this.appId);\n    }\n\n    public async cancelJob(jobId: string): Promise<void> {\n        this.bridge.doCancelJob(createProcessorId(jobId, this.appId), this.appId);\n    }\n\n    public async cancelAllJobs(): Promise<void> {\n        this.bridge.doCancelAllJobs(this.appId);\n    }\n    public async cancelJobByDataQuery(data: object): Promise<void> {\n        this.bridge.doCancelJobByDataQuery(data, this.appId);\n    }\n}\n"]}